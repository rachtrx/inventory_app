<<<<<<< HEAD
version: '3.8'

services:
  inventory_app:
    build: 
      context: ./services/web
      dockerfile: Dockerfile.prod
    command: gunicorn --bind 0.0.0.0:5000 manage:app
    volumes:
      - static_volume:/home/app/web/project/static
      - uploads_volume:/home/app/web/project/uploads
    expose: 
      - 5000
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:14
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
  nginx:
    build: ./services/nginx
    volumes:
      - static_volume:/home/app/web/project/static
      - uploads_volume:/home/app/web/project/uploads
    ports:
      - 80:80
    depends_on:
      - web
    networks:
      default:
        aliases: 
          - inventory_proxy

volumes:
  postgres_data_prod:
  static_volume:
  uploads_volume:
=======
services:
  nginx:
    build: ./services/nginx
    ports:
      - 80:80
    depends_on:
      - chatbot
  chatbot:
    build: ./services/app
    expose: 
      - 5001
    environment:
      - PYTHONUNBUFFER=1
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # is this needed if its already in my flask .env file?
      # - ENV_FILE=.env.dev
    env_file:
      - ./services/app/.env
    volumes:
      - ./services/app/logs:/var/log/
      - ./services/app/token.txt:${TOKEN_PATH}
      - ./services/app/alembic/versions:/home/app/web/alembic/versions # not needed for web server
      # - certs:/etc/chatbot/certs
    depends_on:
      - db
      - redis
  db:
    build:
      context: ./services/db
      dockerfile: Dockerfile
    volumes:
      - postgres_chatbot:/var/lib/postgresql/data/
    env_file:
      - ./.env.db
    ports:
      - 5432:5432
  redis:
    image: "redis:alpine"
    expose:
      - "6379"

#   setup:
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     volumes:
#       - certs:/usr/share/elasticsearch/config/certs
#     user: "0"
#     command: >
#       bash -c '
#         if [ x${ELASTIC_PASSWORD} == x ]; then
#           echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
#           exit 1;
#         elif [ x${KIBANA_PASSWORD} == x ]; then
#           echo "Set the KIBANA_PASSWORD environment variable in the .env file";
#           exit 1;
#         fi;
#         if [ ! -f config/certs/ca.zip ]; then
#           echo "Creating CA";
#           bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
#           unzip config/certs/ca.zip -d config/certs;
#         fi;
#         if [ ! -f config/certs/certs.zip ]; then
#           echo "Creating certs";
#           echo -ne \
#           "instances:\n"\
#           "  - name: es01\n"\
#           "    dns:\n"\
#           "      - es01\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           "  - name: es02\n"\
#           "    dns:\n"\
#           "      - es02\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           "  - name: es03\n"\
#           "    dns:\n"\
#           "      - es03\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           > config/certs/instances.yml;
#           bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
#           unzip config/certs/certs.zip -d config/certs;
#         fi;
#         echo "Setting file permissions"
#         chown -R root:root config/certs;
#         find . -type d -exec chmod 750 \{\} \;;
#         find . -type f -exec chmod 640 \{\} \;;
#         echo "Waiting for Elasticsearch availability";
#         until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
#         echo "Setting kibana_system password";
#         until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
#         echo "All done!";
#       '
#     healthcheck:
#       test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
#       interval: 1s
#       timeout: 5s
#       retries: 120

#   es01:
#     depends_on:
#       setup:
#         condition: service_healthy
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     volumes:
#       - certs:/usr/share/elasticsearch/config/certs
#       - esdata01:/usr/share/elasticsearch/data
#     ports:
#       - ${ES_PORT}:9200
#     environment:
#       - node.name=es01
#       - cluster.name=${CLUSTER_NAME}
#       - cluster.initial_master_nodes=es01,es02,es03
#       - discovery.seed_hosts=es02,es03
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/es01/es01.key
#       - xpack.security.http.ssl.certificate=certs/es01/es01.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/es01/es01.key
#       - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${LICENSE}
#     mem_limit: ${MEM_LIMIT}
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120

#   es02:
#     depends_on:
#       - es01
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     volumes:
#       - certs:/usr/share/elasticsearch/config/certs
#       - esdata02:/usr/share/elasticsearch/data
#     environment:
#       - node.name=es02
#       - cluster.name=${CLUSTER_NAME}
#       - cluster.initial_master_nodes=es01,es02,es03
#       - discovery.seed_hosts=es01,es03
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/es02/es02.key
#       - xpack.security.http.ssl.certificate=certs/es02/es02.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/es02/es02.key
#       - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${LICENSE}
#     mem_limit: ${MEM_LIMIT}
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120

#   es03:
#     depends_on:
#       - es02
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     volumes:
#       - certs:/usr/share/elasticsearch/config/certs
#       - esdata03:/usr/share/elasticsearch/data
#     environment:
#       - node.name=es03
#       - cluster.name=${CLUSTER_NAME}
#       - cluster.initial_master_nodes=es01,es02,es03
#       - discovery.seed_hosts=es01,es02
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/es03/es03.key
#       - xpack.security.http.ssl.certificate=certs/es03/es03.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/es03/es03.key
#       - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${LICENSE}
#     mem_limit: ${MEM_LIMIT}
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120

#   kibana:
#     depends_on:
#       es01:
#         condition: service_healthy
#       es02:
#         condition: service_healthy
#       es03:
#         condition: service_healthy
#     image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
#     volumes:
#       - certs:/usr/share/kibana/config/certs
#       - kibanadata:/usr/share/kibana/data
#     ports:
#       - ${KIBANA_PORT}:5601
#     environment:
#       - SERVERNAME=kibana
#       - ELASTICSEARCH_HOSTS=https://es01:9200
#       - ELASTICSEARCH_USERNAME=kibana_system
#       - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
#       - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
#       - xpack.security.encryptionKey=${SECURITY_KEY}
#       # - xpack.encryptedSavedObjects.encryptionKey=${OBJECTS_KEY}
#       # - xpack.reporting.encryptionKey=${REPORTING_KEY}
#       # - xpack.reporting.kibanaServer.hostname=localhost
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120
  
    
volumes:
  # certs:
#     driver: local
#   esdata01:
#     driver: local
#   esdata02:
#     driver: local
#   esdata03:
#     driver: local
#   kibanadata:
#     driver: local
  postgres_chatbot:
  
>>>>>>> origin/main
